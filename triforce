#!/usr/bin/env python

# for each config file
#   for each sysenv
#     create the sysenv if it doesn't exist
#     gather all requirements to install and their url and all symlinks
#     pip install the requirements
#     update/create all the symlinks

import os
import sys
import shlex

import yaml
import sh


config_files = sys.argv[1:]


class Virtualenv(object):

    def __init__(self, name, prefix=None,
                 venv_command=None, urls=None, symlinks=None):
        self.name = name
        self.prefix = prefix or os.environ['HOME']
        self.path = os.path.join(self.prefix, self.name)
        self.venv_command = venv_command
        self.urls = urls
        self.symlinks = symlinks

    def __str__(self):
        return str(self.__dict__)

    def create(self):
        print("Creating venv at: '{0}'".format(self.path))
        if self.venv_command in [2, '2', 'py2', 'python2']:
            print(sh.Command('virtualenv {0}'.format(self.path)))
        elif self.venv_command in [3, '3', 'py3', 'python3']:
            print(execute('pyvenv {0}'.format(self.path)))
        else:
            print(execute('{0} {0}'.format(self.venv_command, self.path)))

    @property
    def bin_path(self):
        return os.path.join(self.path, 'bin')

    @property
    def pip_path(self):
        return os.path.join(self.bin_path, 'pip')

    def install_dependencies(self):
        urls_string = ' '.join(self.urls)
        print("Installing dependencies: '{0}'".format(self.urls))
        print("'pip' command is: '{0}'".format(self.pip_path))
        print(execute("{0} install {1}".
                      format(self.pip_path, urls_string)))

    def symlink(self):
        pass

    def process(self):
        self.create()
        self.install_dependencies()


def execute(command):
    p = shlex.split(command)
    c = sh.Command(p[0])
    return c(p[1:])


venvs = []
for config_file in config_files:
    with open(config_file) as config_file_pointer:
        config = yaml.load(config_file_pointer)
        venv_command = 'python3'
        urls, symlinks = [], []
        for sysvenv_name, sysvenv in config.items():
            for program, options in sysvenv.items():
                if program == 'triforce':
                    try:
                        venv_command = options['venv_command']
                    except KeyError:
                        pass
                else:
                    try:
                        urls.append(options['url'])
                    except KeyError:
                        urls.append(program)
                    try:
                        symlinks.extend(options['symlink'])
                    except KeyError:
                        symlinks.append(program)
        venvs.append(Virtualenv(sysvenv_name, venv_command=venv_command,
                                urls=urls, symlinks=symlinks))
    for venv in venvs:
        print(venv)
        venv.process()
