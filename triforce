#!/usr/bin/env python

# for each config file
#   for each sysenv
#     create the sysenv if it doesn't exist
#     gather all requirements to install and their url and all symlinks
#     pip install the requirements
#     update/create all the symlinks

import os
import sys
import yaml
import sh


config_files = sys.argv[1:]


class Virtualenv(object):

    def __init__(self, name, prefix=None,
                 python_version=3, urls=None, symlinks=None):
        self.name = name
        self.prefix = prefix or os.environ['HOME']
        self.path = os.path.join(self.prefix, self.name)
        self.python_version = python_version
        self.urls = urls
        self.symlinks = symlinks

    def __str__(self):
        return str(self.__dict__)

    def create(self):
        print("Creating venv at: '{0}'".format(self.path))
        if self.python_version == 2:
            create_venv_2(self.path)
        elif self.python_version == 3:
            create_venv_3(self.path)
        else:
            raise Exception("Python version: '{0}'".format(self.python_version))

    def process(self):
        self.create()


def create_venv_2(venv_path):
    print(sh.virtualenv(venv_path))


def create_venv_3(venv_path):
    print(sh.pyvenv(venv_path))


venvs = []
for config_file in config_files:
    with open(config_file) as config_file_pointer:
        config = yaml.load(config_file_pointer)
        urls, symlinks = [], []
        for sysvenv_name, sysvenv in config.items():
            for program, options in sysvenv.items():
                try:
                    urls.append(options['url'])
                except KeyError:
                    urls.append(program)
                try:
                    symlinks.extend(options['symlink'])
                except KeyError:
                    symlinks.append(program)
        venvs.append(Virtualenv(sysvenv_name, urls=urls, symlinks=symlinks))
    for venv in venvs:
        print(venv)
        venv.process()
